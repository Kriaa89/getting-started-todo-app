###################################################
# Secure Multi-stage Dockerfile for Todo App
# 
# This Dockerfile addresses Docker Scout security findings:
# - Uses Alpine Linux for smaller attack surface
# - Creates non-root user for security
# - Updates dependencies and uses latest secure versions
# - Implements security best practices
###################################################

###################################################
# Stage: base
# 
# Use Node.js 22 Alpine for smaller image size and better security
###################################################
FROM node:22-alpine AS base
WORKDIR /usr/local/app

# Install security updates, dumb-init, and create non-root user
RUN apk update && apk upgrade && \
    apk add --no-cache dumb-init && \
    rm -rf /var/cache/apk/* && \
    addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 -G nodejs

################## CLIENT STAGES ##################

###################################################
# Stage: client-base
#
# Base stage for client with dependency installation
###################################################
FROM base AS client-base
COPY client/package.json client/package-lock.json ./
# Install all dependencies for building
RUN npm ci && \
    npm cache clean --force
COPY client/.eslintrc.cjs client/index.html client/vite.config.js ./
COPY client/public ./public
COPY client/src ./src

# Change ownership to non-root user
RUN chown -R nextjs:nodejs /usr/local/app

###################################################
# Stage: client-dev
# 
# Development stage for client
###################################################
FROM client-base AS client-dev
USER nextjs
CMD ["dumb-init", "npm", "run", "dev"]

###################################################
# Stage: client-build
#
# Build stage for client static files
###################################################
FROM client-base AS client-build
USER nextjs
RUN npm run build

###################################################
################  BACKEND STAGES  #################
###################################################

###################################################
# Stage: backend-base
#
# Base stage for backend with dependency installation
###################################################
FROM base AS backend-base

# Copy production package.json (without sqlite3) for smaller, faster builds
COPY backend/package.prod.json ./package.json
COPY backend/package-lock.json ./

# Install only production dependencies (no build tools needed)
RUN npm ci --omit=dev && \
    npm cache clean --force

###################################################
# Stage: backend-dev
#
# Development stage for backend
###################################################
FROM backend-base AS backend-dev
COPY backend/spec ./spec
COPY backend/src ./src
# Change ownership to non-root user
RUN chown -R nextjs:nodejs /usr/local/app
USER nextjs
CMD ["dumb-init", "npm", "run", "dev"]

###################################################
# Stage: test
#
# Test stage - runs as root for test permissions if needed
# Uses regular package.json that includes sqlite3 for development/testing
###################################################
FROM backend-dev AS test
USER root
# Copy the full dev package.json for testing
COPY backend/package.json ./package.json
RUN npm install --only=dev
USER nextjs
# Set environment to use MySQL for tests to avoid sqlite3 issues
ENV MYSQL_HOST=mysql
RUN npm run test

###################################################
# Stage: final
#
# Production stage with security hardening
###################################################
FROM base AS final

# Set production environment
ENV NODE_ENV=production

# Copy production package files (without sqlite3)
COPY backend/package.prod.json ./package.json
COPY backend/package-lock.json ./

# Install only production dependencies
RUN npm ci --omit=dev && \
    npm cache clean --force

# Copy application code
COPY backend/src ./src
COPY --from=client-build /usr/local/app/dist ./src/static

# Create logs directory and set permissions
RUN mkdir -p /usr/local/app/logs && \
    chown -R nextjs:nodejs /usr/local/app

# Switch to non-root user
USER nextjs

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"

# Expose port
EXPOSE 3000

# Start application
CMD ["node", "src/index.js"]
