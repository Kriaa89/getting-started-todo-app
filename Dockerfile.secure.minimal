###################################################
# Secure Multi-stage Dockerfile for Todo App
# 
# This Dockerfile addresses Docker Scout security findings:
# - Uses Alpine Linux for smaller attack surface
# - Creates non-root user for security
# - Properly handles sqlite3 dependencies
# - Implements security best practices
###################################################

###################################################
# Stage: base
# 
# Use Node.js 22 Alpine for smaller image size and better security
###################################################
FROM node:22-alpine AS base
WORKDIR /usr/local/app

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 -G nodejs

################## CLIENT STAGES ##################

###################################################
# Stage: client-base
#
# Base stage for client with dependency installation
###################################################
FROM base AS client-base
COPY client/package.json client/package-lock.json ./
# Install dependencies as root, then change ownership
RUN npm ci --omit=dev && \
    npm cache clean --force
COPY client/.eslintrc.cjs client/index.html client/vite.config.js ./
COPY client/public ./public
COPY client/src ./src

# Change ownership to non-root user
RUN chown -R nextjs:nodejs /usr/local/app

###################################################
# Stage: client-build
#
# Build stage for client static files
###################################################
FROM client-base AS client-build
USER nextjs
RUN npm run build

###################################################
################  BACKEND STAGES  #################
###################################################

###################################################
# Stage: backend-build
#
# Build stage for backend with proper sqlite3 compilation
###################################################
FROM node:22-alpine AS backend-build
WORKDIR /usr/local/app

# Install build dependencies for native modules (sqlite3)
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    && ln -sf python3 /usr/bin/python

COPY backend/package.json backend/package-lock.json ./
# Install all dependencies (including devDependencies for building)
RUN npm ci && \
    npm cache clean --force

COPY backend/spec ./spec
COPY backend/src ./src

# Run tests
RUN npm run test

###################################################
# Stage: final
#
# Production stage with security hardening
###################################################
FROM node:22-alpine AS final

# Set production environment
ENV NODE_ENV=production

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 -G nodejs

WORKDIR /usr/local/app

# Copy built backend and install production dependencies only
COPY backend/package.json backend/package-lock.json ./

# Install production dependencies (excluding sqlite3 initially)
# We'll copy the built sqlite3 from the build stage
RUN npm ci --omit=dev --ignore-scripts && \
    npm cache clean --force

# Copy the pre-built sqlite3 node module from build stage
COPY --from=backend-build /usr/local/app/node_modules/sqlite3 ./node_modules/sqlite3

# Copy application code
COPY backend/src ./src
COPY --from=client-build /usr/local/app/dist ./src/static

# Create necessary directories and set permissions
RUN mkdir -p /usr/local/app/logs /etc/todos && \
    chown -R nextjs:nodejs /usr/local/app /etc/todos

# Switch to non-root user
USER nextjs

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"

# Expose port
EXPOSE 3000

# Start application
CMD ["node", "src/index.js"]